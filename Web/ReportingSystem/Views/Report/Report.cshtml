@model IEnumerable<SharedModel.PosTrx>

@{
    ViewBag.Title = "Report";
    var colors = new List<string>() { "Red", "Blue", "Yellow", "Green", "Purple", "Orange" };
    var targetReports = string.IsNullOrEmpty(ViewBag.ChartTypeString) ? "Overview" : ViewBag.ChartTypeString;
}
<style>
    .rootContainer {
        position: relative;
        width: 100%;
    }

    .singleChartContainer {
        position: relative;
        margin: 0 auto;
        padding-top: 50px;
        width: 50%;
    }

    .trxsDetailContainer {
        margin-top: 150px;
    }
</style>
<h2>
    @targetReports Report
</h2>
<script src="../../Scripts/Chart.js"></script>
<div class="rootContainer">
    <div class="singleChartContainer">
        <canvas id="soldItemsTopTenChart"></canvas>
    </div>
    <div class="singleChartContainer">
        <canvas id="indoorAndOutdoorSoldItemsDistributionChart"></canvas>
    </div>
</div>
<script>
    var ctx = document.getElementById("soldItemsTopTenChart");
    var data = {
        @{
            var chartLabelsStr = "";
            var chartDataStr = "";
            if (Model.Any() && Model.Any(m => m.Items != null))
            {
                var allItemsLookup = Model.SelectMany(m => m.Items).Select(i=>i.Item).GroupBy(k => k.ItemName).ToList();
                chartLabelsStr = allItemsLookup.Select(c => @"""" + c.Key + @"""").Aggregate((acc, n) => acc +","+ n);
                chartDataStr = allItemsLookup.Select(c => c.Count().ToString()).Aggregate((acc, n) => acc + "," + n);
            }
        }
        labels: [@Html.Raw(chartLabelsStr)],
        datasets: [
            {
                label: "Sold Items top 10",
                backgroundColor: "rgba(179,181,198,0.2)",
                borderColor: "rgba(179,181,198,1)",
                pointBackgroundColor: "rgba(179,181,198,1)",
                pointBorderColor: "#fff",
                pointHoverBackgroundColor: "#fff",
                pointHoverBorderColor: "rgba(179,181,198,1)",
                data: [@chartDataStr]
            }
        ]
    };
    var myChart = new Chart(ctx,
    {
        type: 'bar',
        data: data,
        options: {
            scales: {
                yAxes: [
                    {
                        ticks: {
                            beginAtZero: true
                        }
                    }
                ]
            }
        }
    });

    var ctx1 = document.getElementById("indoorAndOutdoorSoldItemsDistributionChart");
    var data1 = {
        labels: [@Html.Raw(colors.Select(c => @"""" + c + @"""").Aggregate((acc, n) => acc + "," + n))],
        datasets: [
            {
                label: "Indoor/Outdoor Sold Items",
                backgroundColor: "rgba(179,181,198,0.2)",
                borderColor: "rgba(179,181,198,1)",
                pointBackgroundColor: "rgba(179,181,198,1)",
                pointBorderColor: "#fff",
                pointHoverBackgroundColor: "#fff",
                pointHoverBorderColor: "rgba(179,181,198,1)",
                data: [65, 59, 90, 81, 56, 55, 40]
            }
        ]
    };
    var myChart1 = new Chart(ctx1,
    {
        type: 'line',
        data: data1,
        options: {
            scales: {
                yAxes: [
                    {
                        ticks: {
                            beginAtZero: true
                        }
                    }
                ]
            }
        }
    });

</script>

<div class="trxsDetailContainer">
    <h2>
        All Transaction Detail
    </h2>
    <table class="table">
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.TransactionSource)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.TransactionType)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ReceiptId)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.TerminalId)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ShiftId)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.TransactionInitDateTime)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.NetAmount)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.GrossAmount)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Currency)
            </th>
            <th></th>
        </tr>

        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.TransactionSource)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.TransactionType)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ReceiptId)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.TerminalId)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ShiftId)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.TransactionInitDateTime)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.NetAmount)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.GrossAmount)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Currency)
                </td>
                <td>
                    @Html.ActionLink("Edit", "Edit", new { id = item.Id }) |
                    @Html.ActionLink("Details", "Details", new { id = item.Id }) |
                    @Html.ActionLink("Delete", "Delete", new { id = item.Id })
                </td>
            </tr>
        }

    </table>
</div>